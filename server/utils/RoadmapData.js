const RoadmapData = [
  // Frontend
  {
    tech: "html",
    title: "HTML Roadmap",
    steps: [
      "Introduction to HTML: What is HTML, basic syntax, setting up the first page",
      "HTML Document Structure: DOCTYPE, html, head, body tags",
      "Text Formatting & Layout: headings, paragraphs, lists, line breaks, and comments",
      "Working with Links and Images: anchor tag, img tag, relative vs absolute paths",
      "HTML Tables: table, tr, th, td, rowspan, colspan",
      "Forms and Input Elements: input types, textarea, label, button, select, form submission",
      "Semantic HTML: section, article, nav, header, footer, main",
      "Media Elements: audio, video, iframe, embed",
      "Accessibility Basics: alt attributes, aria-labels, tab index",
      "SEO Basics: meta tags, semantic structure, content hierarchy",
    ],
  },
  {
    tech: "css",
    title: "CSS Roadmap",
    steps: [
      "Introduction to CSS: Inline, Internal, External stylesheets",
      "Selectors and Specificity: basic, class, ID, descendant, pseudo-classes",
      "Box Model: content, padding, border, margin",
      "Styling Text and Fonts: font-family, font-size, line-height, text-align",
      "Positioning and Display: static, relative, absolute, fixed, z-index",
      "Flexbox: axes, justify-content, align-items, gap",
      "CSS Grid: grid-template, rows/columns, areas, placement",
      "Responsive Design: media queries, viewport units, mobile-first approach",
      "Transitions and Animations: transition-property, keyframes",
      "CSS Variables and Custom Properties",
      "CSS Preprocessors: SASS, SCSS basics",
    ],
  },
  {
    tech: "javascript",
    title: "JavaScript Roadmap",
    steps: [
      "Introduction and Setup: script tags, console.log, linking JS file",
      "Variables and Data Types: let, const, var, primitive types",
      "Operators and Control Flow: arithmetic, comparison, logical, if/else, switch",
      "Loops and Iteration: for, while, forEach, map",
      "Functions: declarations, expressions, arrow functions, scope, hoisting",
      "Objects and Arrays: properties, methods, destructuring",
      "DOM Manipulation: getElementById, querySelector, event listeners, innerHTML",
      "ES6+ Features: template literals, spread/rest, destructuring, modules",
      "Asynchronous JS: callbacks, promises, async/await",
      "APIs and HTTP Requests: Fetch API, Axios, RESTful APIs",
      "Error Handling: try/catch, debugging with console and browser tools",
    ],
  },
  {
    tech: "react",
    title: "React Roadmap",
    steps: [
      "Intro to React & JSX: create-react-app, JSX syntax, Babel",
      "Components: functional vs class components, props, composition",
      "State Management in Components: useState, lifting state up",
      "Event Handling: onClick, onChange, event handlers",
      "React Hooks: useEffect, useRef, useMemo, useCallback",
      "React Router: routing setup, nested routes, dynamic params",
      "Forms in React: controlled vs uncontrolled inputs, validation",
      "Global State Management: Context API, Redux basics",
      "API Integration: fetching data with useEffect, axios integration",
      "React Best Practices: folder structure, reusable components, keys, conditional rendering",
      "Performance Optimization: memoization, lazy loading, suspense",
      "Testing: unit tests with Jest, integration testing with React Testing Library",
    ],
  },
  {
    tech: "redux",
    title: "Redux Roadmap",
    steps: [
      "Introduction: What is Redux, when and why to use it",
      "Core Concepts: Store, Actions, Reducers, state immutability",
      "Creating a Simple Store: configureStore, dispatching actions",
      "Connecting Redux to React: useSelector, useDispatch",
      "Redux Middleware: async flow with Redux Thunk",
      "Redux Toolkit: createSlice, configureStore, RTK Query basics",
      "Advanced Async: Redux Saga (optional)",
      "Debugging: using Redux DevTools, logging middleware",
      "Best Practices: normalization, splitting slices, scalability",
      "Testing Redux Logic: testing reducers and async actions",
    ],
  },
  {
    tech: "vue",
    title: "Vue Roadmap",
    steps: [
      "Introduction to Vue: CDN vs CLI setup, Vue DevTools",
      "Vue Instance: data, methods, lifecycle hooks",
      "Template Syntax: interpolation, directives (v-bind, v-if, v-for, etc.)",
      "Events and Forms: v-on, v-model, handling user input",
      "Components: creating, nesting, props, custom events, slots",
      "Single File Components (SFC): .vue file structure (template, script, style)",
      "Vue Router: routes, nested routes, dynamic params, navigation guards",
      "State Management with Vuex: store, mutations, actions, modules",
      "Composition API: setup(), reactive(), ref(), watch(), computed()",
      "API Communication: axios, fetch, lifecycle-based calls",
      "Vue 3 Features: teleport, fragments, suspense, script setup",
      "Testing and Debugging: unit tests, Vue Test Utils",
    ],
  },
  {
    tech: "angular",
    title: "Angular Roadmap",
    steps: [
      "Getting Started: Angular CLI, project setup, structure",
      "TypeScript Basics: types, interfaces, classes, decorators",
      "Components: metadata, templates, styles, inputs/outputs",
      "Modules: NgModules, feature modules, lazy loading",
      "Data Binding: one-way, two-way, property, event binding",
      "Directives and Pipes: structural (ngIf, ngFor), attribute directives, custom pipes",
      "Services and Dependency Injection: creating and injecting services",
      "Routing: configuring routes, route params, child routes, guards",
      "Forms: template-driven vs reactive forms, validation, form groups",
      "HTTPClient: making API calls, interceptors, error handling",
      "RxJS and Observables: operators, subjects, handling streams",
      "State Management with NgRx (optional): actions, reducers, effects",
      "Testing and Deployment: unit testing, end-to-end testing, building for production",
    ],
  },

  // Backend
  {
    tech: "node.js",
    title: "Node.js Roadmap",
    steps: [
     "Introduction: What is Node.js, use cases, setup",
      "Node Architecture: Event loop, non-blocking I/O, single-threaded model",
      "Core Modules: fs, path, os, http, events",
      "NPM: installing packages, scripts, semantic versioning",
      "Working with the File System: read/write, streams, buffers",
      "HTTP Module: creating a basic server, handling requests/responses",
      "Express.js Framework: routing, middleware, templating engines",
      "Environment Variables and Config Management",
      "Connecting to Databases: MongoDB (Mongoose), SQL (Sequelize)",
      "Authentication: sessions, cookies, JWT, OAuth2",
      "Validation and Error Handling: middleware-based validation and central error handlers",
      "Building REST APIs: status codes, REST principles, controller-service structure",
      "Testing and Debugging: Postman, Mocha, Chai",
      "Security and Performance: Helmet, rate limiting, clustering",
      "Deployment: using process managers (PM2), environment setup",
    ],
  },
  {
    tech: "express",
    title: "Express Roadmap",
    steps: [
      "Introduction to Express: why use it, setup, basic routing",
      "Request and Response Objects: req.body, req.params, req.query, res.send/json",
      "Routing: route parameters, grouping, modular routing with Router",
      "Middleware: built-in, third-party, custom middlewares",
      "Template Engines (optional): EJS, Pug for rendering HTML",
      "CRUD Operations: handling POST, GET, PUT, DELETE requests",
      "Authentication: JWT, passport.js integration",
      "Authorization: route protection, role-based access",
      "Validation: express-validator or Joi for input validation",
      "Error Handling: custom error handlers, error codes",
      "File Uploads and Static Files: multer, express.static",
      "CORS and Environment Configs: .env, cors middleware",
      "Production & Deployment: logging, using PM2, hosting on platforms like Heroku or Vercel",
    ],
  },
  {
    tech: "java",
    title: "Java Roadmap",
    steps: [
      "Java Basics: data types, variables, operators, control structures",
      "Object-Oriented Programming: classes, objects, inheritance, polymorphism, encapsulation, abstraction",
      "Java Collections Framework: List, Set, Map, Queue, Iterator, Generics",
      "Exception Handling: try-catch, throw, throws, custom exceptions",
      "Multithreading and Concurrency: Thread class, Runnable, synchronization, ExecutorService",
      "File I/O and Streams: FileReader, FileWriter, BufferedReader, InputStream, OutputStream",
      "Java 8+ Features: Streams API, Lambda expressions, Optional class, functional interfaces",
      "JDBC (Java Database Connectivity): connecting to DB, executing queries, prepared statements",
      "Unit Testing with JUnit and Mocking with Mockito",
      "Java Application Packaging: JARs, build tools like Maven/Gradle",
    ],
  },
  {
    tech: "spring",
    title: "Spring Roadmap",
    steps: [
      "Introduction to Spring: modules, IOC and DI concepts",
      "Spring Core: Beans, ApplicationContext, annotations (@Component, @Autowired, etc.)",
      "Spring MVC: DispatcherServlet, Controllers, ViewResolvers, RESTful services",
      "Spring Boot: auto-configuration, starter dependencies, creating REST APIs",
      "Data Persistence with Spring Data JPA: repositories, entities, JPQL",
      "Spring Security: basic auth, role-based auth, JWT integration",
      "Spring Validation: javax validation annotations, custom validators",
      "Testing: unit and integration testing with Spring Test, Mockito",
      "REST API Versioning and HATEOAS (advanced)",
      "Deploying Spring Boot Apps: WAR vs JAR, deploying to cloud or Docker",
    ],
  },
  {
    tech: "python",
    title: "Python Roadmap",
    steps: [
      "Syntax and Data Structures",
      "Functions and OOP",
      "Modules and Packages",
      "File Handling",
      "Exception Handling",
      "Web Frameworks (Flask, Django)",
    ],
  },
  {
    tech: "django",
    title: "Django Roadmap",
    steps: [
       "📁 Project Structure: manage.py, apps, settings, URLs",
    "⚙️ Settings & Environment: Debug mode, environment variables, installed apps",
    "📄 Models: ORM, fields, relationships, model methods",
    "👁️ Views: Function-based views (FBV), class-based views (CBV)",
    "🎨 Templates: Django templating language, inheritance, filters, static/media files",
    "🔄 URL Routing: path(), re_path(), include()",
    "🧾 Forms: Built-in forms, ModelForms, validation, crispy-forms",
    "👮 Authentication: Login, logout, password reset, user registration, permissions",
    "🛡️ Authorization: Groups, custom permissions, decorators",
    "🛠️ Admin Customization: ModelAdmin, list display, filters, inline models",
    "🗄️ Migrations: makemigrations, migrate, data migrations",
    "🔌 REST APIs (with DRF): Serializers, views, viewsets, routers, token auth",
    "🚀 Deployment: Gunicorn, Nginx, Heroku, Docker, GitHub Actions"
    ],
  },

  // Database
  {
    tech: "mysql",
    title: "MySQL Roadmap",
    steps: [
     "🧠 Database Design: ER diagrams, keys, relationships, normalization",
    "🛠️ SQL Basics: CREATE, INSERT, SELECT, UPDATE, DELETE",
    "🔀 Joins: INNER, LEFT, RIGHT, FULL joins and their real-world uses",
    "🔍 Subqueries: Nested queries, correlated subqueries",
    "⚡ Indexes & Constraints: Primary/foreign keys, NOT NULL, UNIQUE, CHECK",
    "📜 Views & Stored Procedures: Encapsulating logic inside DB",
    "🔒 Transactions & ACID: COMMIT, ROLLBACK, isolation levels",
    "🧯 Backup & Security: mysqldump, user roles, GRANT/REVOKE permissions",
    "📊 Optimization: Query profiling, explain plans, caching"
    ],
  },
  {
    tech: "mongodb",
    title: "MongoDB Roadmap",
    steps: [
      "🌱 NoSQL Basics: JSON-like documents, collections vs. tables, use-cases",
    "🛠️ CRUD with Mongo Shell: insertOne(), find(), update(), delete()",
    "📦 Indexing & Performance: Single field, compound, TTL, text & geo indexes",
    "🧠 Aggregation Framework: $match, $group, $project, $lookup, pipelines",
    "📐 Data Modeling: Embedding vs. referencing, schema design for scale",
    "🔌 Mongoose (Node.js): Models, schemas, middleware, validation",
    "🧪 Testing & Validation: Schema validation, MongoMemoryServer",
    "🛡️ Security: User roles, authentication, SSL, IP whitelist"
    ],
  },
  {
    tech: "postgresql",
    title: "PostgreSQL Roadmap",
    steps: [
       "📘 SQL Basics: DDL, DML, DQL commands",
    "🎯 Data Types: Arrays, JSONB, ENUM, HSTORE",
    "📐 Constraints: UNIQUE, CHECK, EXCLUDE, FOREIGN KEY",
    "🔍 Advanced Queries: CTEs, window functions, recursive queries",
    "⏱️ Triggers & Functions: PL/pgSQL, triggers for audit/logs",
    "🧠 Views & Materialized Views: Data abstraction, refresh strategies",
    "⚡ Performance Tuning: Index strategies, EXPLAIN ANALYZE",
    "📦 Backup & Replication: WAL archiving, logical/physical replication",
    "🔒 Security: Role-based access control, SSL, pg_hba.conf"
    ],
  },
  {
    tech: "firebase",
    title: "Firebase Roadmap",
    steps: [
      "👤 Authentication: Email/password, Google login, phone auth, anonymous sign-in",
    "🗃️ Firestore Database: Document model, collections, rules, queries",
    "📡 Realtime Database: Data tree, syncing in real time, offline access",
    "📦 Storage: Upload/download files, security rules, metadata",
    "🛠️ Firebase Functions: Writing serverless functions, triggers (auth, DB, HTTP)",
    "📈 Analytics & Crashlytics: User behavior, crash reporting",
    "🚀 Hosting: Deploy static apps, custom domains, rewrite rules",
    "🔗 Integration: With React, Flutter, Node.js, and mobile platforms",
    "🧪 Emulator Suite: Local testing for DB, functions, hosting"
    ],
  },

  // DevOps
  {
    tech: "docker",
    title: "Docker Roadmap",
    steps: [
      "🔍 Understand Containers vs Virtual Machines – Lightweight, isolated environments vs full OS VMs.",
    "💻 Docker CLI Basics – Install Docker, learn commands like `docker run`, `ps`, `exec`, `logs`.",
    "📦 Docker Images – Build custom images with Dockerfile, layer caching, tagging.",
    "🗃️ Volumes & Bind Mounts – Store persistent data outside containers.",
    "🌐 Docker Networking – Bridge, host, none, custom networks.",
    "🧩 Docker Compose – Define multi-container apps with `docker-compose.yml`.",
    "🛠️ Dockerizing Applications – Containerize Node, Python, or full-stack apps.",
    "🚀 Pushing to Docker Hub – Tag and upload images to public/private repos.",
    "🔒 Security Best Practices – Minimize images, scan vulnerabilities, use non-root user.",
    "📦 Multi-stage Builds – Optimize final image size using multi-stage Dockerfiles."
    ],
  },
  {
    tech: "kubernetes",
    title: "Kubernetes Roadmap",
    steps: [
     "📦 Pods, ReplicaSets, Deployments – Deploy scalable and fault-tolerant applications.",
    "🌐 Services & Ingress – Internal/external traffic management.",
    "💾 Persistent Volumes & ConfigMaps – Manage data and configuration.",
    "📁 Namespaces – Isolate resources per team/project.",
    "📦 Helm Charts – Package K8s applications using Helm.",
    "📊 Monitoring & Logging – Use Prometheus, Grafana, EFK stack.",
    "🛡️ Role-Based Access Control (RBAC) – Secure cluster access.",
    "⚙️ Autoscaling – HPA and VPA to adjust workloads automatically.",
    "🔄 Rolling Updates and Rollbacks – Deploy changes without downtime.",
    "🔒 Network Policies – Secure pod-to-pod communication."
    ],
  },
  {
    tech: "ci/cd",
    title: "CI/CD Roadmap",
    steps: [
      "📁 Version Control with Git – Branching, merging, tagging.",
    "⚙️ CI Basics – Automate builds & tests on every push.",
    "🚦 GitHub Actions / Jenkins – Setup workflows or pipelines.",
    "🧪 Automated Testing – Unit, integration, e2e tests.",
    "🔧 Build Pipelines – Compile code, install dependencies, lint.",
    "🚢 CD Strategies – Blue/Green, Canary, Rolling Deployments.",
    "⏪ Rollback/Rollout – Handle failures gracefully.",
    "📊 CI/CD Dashboards – Monitor deployment stages.",
    "🔒 Secrets Management – Secure environment variables.",
    "📨 Notifications – Slack/Email alerts for pipeline events."
    ],
  },
  {
    tech: "aws",
    title: "AWS Roadmap",
    steps: [
       "🖥️ EC2 and S3 – Launch servers, store and serve files.",
    "🔐 IAM, Roles & Policies – Manage user access and permissions.",
    "🧠 RDS & DynamoDB – SQL and NoSQL databases on AWS.",
    "📈 CloudWatch & CloudTrail – Monitor metrics and API usage.",
    "🚀 Elastic Beanstalk / Lambda – Serverless & managed deployments.",
    "🌐 VPC & Subnets – Design secure and scalable network.",
    "📁 EBS & EFS – Persistent storage solutions.",
    "🛡️ Security Groups & NACLs – Control traffic to resources.",
    "📤 SQS & SNS – Messaging and notifications.",
    "🧰 AWS CLI & SDK – Automate and script AWS operations."
    ],
  },
  {
    tech: "azure",
    title: "Azure Roadmap",
    steps: [
      "🖥️ Azure Portal & CLI – Navigate, create, and manage resources.",
    "🧩 App Services & Functions – Deploy web and serverless apps.",
    "📦 Blob & Table Storage – Manage unstructured and structured data.",
    "🧠 Azure SQL & Cosmos DB – Cloud relational and NoSQL options.",
    "🌐 Virtual Networks & NSGs – Set up secure communication.",
    "📊 Azure Monitor & Insights – Analyze performance & logs.",
    "🔐 Azure AD – Identity and access management.",
    "📁 Resource Groups & Tags – Organize cloud resources.",
    "🛠️ ARM Templates – Automate infrastructure deployment.",
    "💰 Cost Management – Monitor and optimize spending."
    ],
  },

  // OS
  {
    tech: "linux",
    title: "Linux Roadmap",
    steps: [
       "🖥️ Shell Basics – Commands like `ls`, `cd`, `pwd`, `man`.",
    "📂 File System & Permissions – `chmod`, `chown`, `umask`.",
    "📦 Package Managers – `apt`, `yum`, `dnf`, `snap`.",
    "⚙️ Process Management – `ps`, `top`, `kill`, `nice`.",
    "🌐 Networking Commands – `ping`, `netstat`, `ip`, `ss`, `nmap`.",
    "📜 Shell Scripting – Automate tasks using Bash scripts.",
    "🔍 System Logs & Monitoring – `journalctl`, `dmesg`, `htop`.",
    "📁 Cron Jobs – Schedule recurring tasks.",
    "🔐 User Management – `adduser`, `passwd`, `groups`.",
    "🛡️ Basic Security – UFW, fail2ban, SSH hardening."
    ],
  },
  {
    tech: "windows",
    title: "Windows Roadmap",
    steps: [
      "💻 Command Line & PowerShell – Automate using commands and scripts.",
    "🗂️ File System & Explorer – Understand file structure, hidden files.",
    "🧰 Task Scheduler – Run scripts and apps on schedule.",
    "📝 Windows Registry – Configuration settings (handle with care).",
    "👤 User & Permission Management – Group policy and file access.",
    "🔧 Services & Resource Monitor – Manage running services and system usage.",
    "📦 Windows Package Managers – Chocolatey, winget.",
    "🛠️ System Restore & Backup – Protect your system.",
    "📊 Event Viewer – Monitor system logs.",
    "🛡️ Defender & Firewall – Basic Windows security tools."
    ],
  },
  {
    tech: "macos",
    title: "MacOS Roadmap",
    steps: [
      "🖥️ Terminal Basics – Use zsh or bash for CLI tasks.",
    "🍺 Homebrew – Install and manage software.",
    "⚙️ System Preferences – Configure display, keyboard, accessibility.",
    "⌨️ Shortcuts – Improve productivity with hotkeys.",
    "📂 App & File Management – Use Finder like a pro.",
    "🛠️ Scripting – Automator, AppleScript, and shell scripting.",
    "🧼 Activity Monitor – Manage memory and processes.",
    "🧩 Managing LaunchAgents – Control startup programs.",
    "🧳 Time Machine – Backup and restore files.",
    "🛡️ Security & Privacy Settings – App permissions, FileVault."
    ],
  },

  // Networking
  {
    tech: "http",
    title: "HTTP Roadmap",
    steps: [
     "📬 HTTP Methods – GET, POST, PUT, DELETE, PATCH.",
    "📟 Status Codes – 200, 301, 404, 500 and their meanings.",
    "🔐 HTTPS & SSL – Secure communication with TLS.",
    "🍪 Cookies & Headers – Manage sessions and metadata.",
    "🔄 REST APIs – Principles, design, best practices.",
    "📦 Content-Type & Caching – Static vs dynamic, ETag, Cache-Control.",
    "🌍 CDN & Reverse Proxies – Accelerate content delivery.",
    "🧪 Tools – Postman, curl, Insomnia for API testing.",
    "🎯 WebSockets – Real-time communication over HTTP.",
    "🧱 Rate Limiting – Protect APIs from abuse."
    ],
  },
  {
    tech: "dns",
    title: "DNS Roadmap",
    steps: [
      "🌐 DNS Basics – What DNS is and why it’s important.",
    "📄 Record Types – A, AAAA, CNAME, MX, TXT, SRV.",
    "🔍 Lookup Process – Recursive and iterative queries.",
    "⏱️ TTL & Caching – Manage propagation and resolution time.",
    "📦 DNS Providers – Cloudflare, Google DNS, Route 53.",
    "📊 Monitoring DNS – Tools to troubleshoot DNS issues.",
    "🔒 DNS Security – DNSSEC, DoH, DoT.",
    "🧰 CLI Tools – `dig`, `nslookup`, `host`, `whois`.",
    "🔁 Reverse DNS – Mapping IPs to domain names.",
    "🛠️ Zone Files – Understand and configure zone records."
    ],
  },
  {
    tech: "loadbalancing",
    title: "Load Balancing Roadmap",
    steps: [
      "⚖️ What is Load Balancing – Distributing network traffic across servers.",
    "🧩 Types – L4 (Transport Layer), L7 (Application Layer).",
    "🌐 HAProxy & NGINX – Set up and configure for traffic routing.",
    "📡 Load Balancing in Cloud – AWS ELB, Azure Load Balancer.",
    "📈 Health Checks – Ensure backend availability.",
    "🔁 Session Persistence – Sticky sessions.",
    "🛑 Failover Handling – High availability setup.",
    "📊 Traffic Monitoring – Analyze load metrics.",
    "🔐 SSL Termination – Handle encryption at the load balancer.",
    "⚙️ Global Load Balancing – Distribute traffic across geographies."
    ],
  },
  {
    tech: "firewalls",
    title: "Firewalls Roadmap",
    steps: [
       "🔥 What is a Firewall – Network security system.",
    "📚 Types – Hardware, software, stateless, stateful, proxy.",
    "🔧 iptables & ufw – Linux firewall configuration.",
    "🌐 Network ACLs – Control access at the subnet level.",
    "🛡️ Security Groups – AWS/Cloud resource-level protection.",
    "📦 Windows Firewall – Configure rules via UI or PowerShell.",
    "🧰 Tools – Fail2ban, CSF, firewalld.",
    "📜 Rule Management – Allow, deny, logging.",
    "📊 Firewall Monitoring – Detect anomalies or intrusions.",
    "🔐 Best Practices – Least privilege, logging, alerts."
    ],
  },

  // AIML
  {
    tech: "machinelearning",
    title: "Machine Learning Roadmap",
    steps: [
        "🐍 Python for ML: Learn basics of Python programming, libraries like NumPy, Pandas, Matplotlib.",
      "📐 Math Foundations: Study Linear Algebra, Probability, Statistics, and Calculus basics crucial for ML.",
      "🧹 Data Preprocessing: Handle missing data, normalization, feature engineering, and encoding.",
      "📊 Supervised/Unsupervised Learning: Understand algorithms like Linear Regression, Decision Trees, Clustering.",
      "📚 Scikit-learn & TensorFlow: Get hands-on with ML libraries for building and training models.",
      "⚙️ Model Tuning: Learn hyperparameter tuning, cross-validation, and techniques to improve accuracy.",
      "🚀 Deployment: Deploy models using Flask, FastAPI, or cloud services (AWS, GCP, Azure).",
    ],
  },
  {
    tech: "pandas",
    title: "Pandas Roadmap",
    steps: [
       "📊 Series and DataFrames: Understand core data structures for handling tabular data.",
      "📁 Reading/Writing Files: Work with CSV, Excel, JSON, SQL, and other formats.",
      "🧹 Data Cleaning: Handle missing values, duplicates, and data type conversions.",
      "📈 Grouping and Aggregating: Use groupby, pivot tables, and aggregation functions to summarize data.",
      "🔗 Merging and Joining: Combine datasets using merges, joins, and concatenations.",
    ],
  },
  {
    tech: "numpy",
    title: "NumPy Roadmap",
    steps: [
      "🔢 Arrays and Vectors: Learn to create and manipulate multi-dimensional arrays.",
      "✂️ Array Indexing and Slicing: Efficiently access and modify array elements.",
      "➕ Math and Stats Operations: Perform element-wise operations, mean, median, std deviation.",
      "🌐 Broadcasting: Apply operations on arrays of different shapes without explicit looping.",
      "📐 Linear Algebra with NumPy: Matrix multiplication, eigenvalues, solving linear systems.",
    ],
  },
  {
    tech: "tensorflow",
    title: "TensorFlow Roadmap",
    steps: [
      "📦 Tensors and Operations: Understand TensorFlow data structures and basic tensor operations.",
      "🧱 Keras Sequential API: Build neural networks easily with Keras high-level API.",
      "🏋️ Training Models: Train models with optimizers, loss functions, and datasets.",
      "🔄 Callbacks and Regularization: Use callbacks for early stopping and apply dropout/L2 regularization.",
      "💾 Saving and Loading Models: Save trained models and load them for inference or further training.",
    
    ],
  },
  {
    tech: "scikit-learn",
    title: "Scikit-learn Roadmap",
    steps: [
       "🔍 Model Selection: Choose appropriate ML algorithms based on problem type.",
      "⚙️ Preprocessing Pipelines: Automate preprocessing with pipelines and transformers.",
      "🧮 Classification and Regression: Implement key supervised learning models.",
      "📏 Model Evaluation Metrics: Use accuracy, precision, recall, F1 score, and ROC-AUC for validation.",
      "🔄 Cross Validation: Apply K-Fold cross-validation for robust model performance estimation.",
    ],
  },

  // AR/VR
  {
    tech: "unity",
    title: "Unity Roadmap",
    steps: [
       "🛠 Unity Editor Basics: Learn interface, project setup, and scene management.",
      "📜 C# Scripting: Understand scripting basics to control game objects and logic.",
      "⚛️ Physics and Input: Implement collision, gravity, and user input controls.",
      "🎨 UI Elements: Design and manage user interfaces and HUDs.",
      "🕶 VR/AR SDK Integration: Integrate SDKs like Oculus, ARCore, or ARKit for immersive experiences.",
    ],
  },
  {
    tech: "unreal",
    title: "Unreal Engine Roadmap",
    steps: [
     "🔷 Blueprint System: Visual scripting for rapid prototyping without code.",
      "💻 C++ in Unreal: Learn advanced gameplay programming using C++.",
      "🏞 Level Design: Create immersive worlds with landscape tools and environment assets.",
      "💡 Animation and Lighting: Implement character animations and realistic lighting setups.",
      "🕹 VR Templates: Use pre-built VR templates to jumpstart virtual reality projects.",
    ],
  },
  {
    tech: "blender",
    title: "Blender Roadmap",
    steps: [
      "🔲 3D Modeling Basics: Master mesh creation, extrusion, and modifiers.",
      "🎨 Texturing and Materials: Apply materials, UV mapping, and shaders.",
      "🎞 Animation: Learn keyframing, rigging basics, and animation curves.",
      "🦾 Rigging: Build skeletons for character movement and deformation.",
      "🚀 Exporting for Unity/Unreal: Prepare assets for game engines with correct formats.",
    ],
  },
  {
    tech: "arkit",
    title: "ARKit Roadmap",
    steps: [
       "⚙️ Setting up with Xcode: Configure your macOS environment and start AR projects.",
      "🌌 SceneKit and RealityKit: Create and manipulate 3D content in AR.",
      "😃 Face Tracking: Use ARKit's face tracking capabilities for expressive apps.",
      "📦 Object Detection: Recognize and interact with real-world objects in AR.",
    ],
  },
  {
    tech: "arcore",
    title: "ARCore Roadmap",
    steps: [
      "📱 Android Studio Setup: Prepare environment and SDK for AR development.",
      "🖼 Augmented Images: Detect and track images in the physical world.",
      "🛩 Plane Detection: Identify horizontal and vertical surfaces for placing objects.",
      "🌳 Environmental Understanding: Use lighting and depth data for realistic AR scenes.",
    ],
  },
];

export default RoadmapData;
